<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd">


  <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
    <property name="maxTotal" value="${redis.pool.maxTotal}"></property>
    <property name="maxIdle" value="${redis.pool.maxIdle}"></property>
    <property name="minIdle" value="${redis.pool.minIdle}"></property>
    <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"></property>
    <property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"></property>
    <property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}"></property>
    <property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}"></property>
    <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"></property>
    <property name="testOnReturn" value="${redis.pool.testOnReturn}"></property>
    <property name="testWhileIdle" value="${redis.pool.testWhileIdle}"></property>
  </bean>

  <bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		destroy-method="destroy">
    <property name="hostName" value="${redis.conn.hostName}" />
    <property name="port" value="${redis.conn.port}" />
    <property name="timeout" value="${redis.conn.timeout}" />
    <property name="database" value="${redis.conn.database}" />
    <property name="password" value="${redis.conn.password}" />
    <property name="usePool" value="${redis.conn.usePool}" />
    <property name="poolConfig" ref="jedisPoolConfig" />
  </bean>

  <!-- redis template definition p表示对该bean里面的属性进行注入，格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样 -->
  <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">
    <!-- 序列化方式 建议key/hashKey采用StringRedisSerializer。 -->
    <property name="keySerializer" ref ="stringRedisSerializer">
    </property>
    <property name="hashKeySerializer" ref ="stringRedisSerializer">
    </property>
    <property name="valueSerializer" ref ="stringRedisSerializer">
    </property>
    <property name="hashValueSerializer" ref ="stringRedisSerializer">
    </property>
  </bean>

  <bean id="stringRedisSerializer"
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
  <!-- 对string操作的封装 -->
  <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory" />
  <!-- 		<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager" c:template-ref="redisTemplate"/> -->

</beans>